==Class Table Inheritance

Class Table Inheritance for ActiveRecord. More about the pattern on http://www.martinfowler.com/eaaCatalog/classTableInheritance.html.

This plugin messes very little with Rails inheritance mechanism. Instead it relies on updatable views in the database to represent classes
in the inheritance chain. The approach was first {suggested by John Wilger}[http://web.archive.org/web/20060408145717/johnwilger.com/articles/2005/09/29/class-table-inheritance-in-rails-with-postgresql].

API documentation is available at http://clti.rubyforge.org.

==Compatibility

Rails: 2.3.2

Ruby: tested with 1.8.6 and 1.9 

Database: PostgreSQL 8.1+ only. Patches for other DBMS are welcome. Note that you are not required to use updateable views, children relations can be tables (with some triggers involved) or materialized views.

==Usage

===Setup

Keep in mind that only PostgreSQL is currently supported.
1. <tt>rake class_table_inheritance:setup</tt> to create a migration.
1. <tt>rake db:migrate</tt>.
1. In <tt>config/environment.rb</tt> set <tt>config.active_record.schema_format = :sql</tt>. Database views and rules are not supported in schema.rb by default. There are some plugins that add such support, but class_table_inheritance is not tested against them. 

===Example

  class CtiExample < ActiveRecord::Migration
    def self.up
      create_table :locomotives do |t|
        t.column :name, :string
        t.column :max_speed, :integer
        t.column :type, :string
      end
      
      create_child(:steam_locomotives, :parent => :locomotives) do |t|
        t.decimal :water_consumption, :precision => 6, :scale => 2
        t.decimal :coal_consumption,  :precision => 6, :scale => 2
      end
      
      create_child(:electric_locomotives, :table => :raw_electric_locomotives, :parent => :locomotives)  do |t|
        t.decimal :electricity_consumption, :precision => 6, :scale => 2
      end
    end
    
    def self.down
      drop_child  :steam_locomotives
      drop_child  :electric_locomotives
      drop_table  :locomotives
    end
  end

And the models:
  class Locomotive
  end
  
  class SteamLocomotive < Locomotive
    set_table_name :steam_locomotives
  end

  class ElectricLocomotive < Locomotive
    set_table_name :electric_locomotives
  end

Note that models of children classes must specify table name explicitly.

===Changing Columns in Underlying Tables

  class RemoveColumnInParentTable < ActiveRecord::Migration
    def self.up
      remove_parent_and_children_views(:locomotives)
      remove_column(:locomotives, :max_speed)
      rename_column(:name, :title)
      rebuild_parent_and_children_views(:locomotives)
    end
  end 

===Renaming Underlying Tables

  remove_parent_and_children_views(:old_name,:new_name)
  rename_table(:old_name,:new_name)
  execute "UPDATE class_table_inheritance SET child_aggregate_view = 'new_name' WHERE child_aggregate_view = 'old_name'"
  execute "UPDATE class_table_inheritance SET parent_relation = 'new_name' WHERE parent_relation = 'old_name'"
  rebuild_parent_and_children_views(:new_name)

===Removing Classes

Note that you should remove only leaf classes (i.e. those that do not have descendants). If you want to erase a whole chain or part of chain you have to remove first the leaves and then their ancestors. Use <tt>drop_child(child_view)</tt> in migrations.

==Compatibility with Single Table Inheritance

The approach taken in this plugin is completely independent from Rails single table inheritance. STI and CLTI can safely be mixed in one inheritance chain.

==Testing Your App

Run <tt>rake class_table_inheritance:fixture</tt> to generate fixture for the class_table_inheritance table. <b>Without it primary key sequence for 
inheritors' tables won't be bumped to the max and it might not be possible to save objects!</b>

==Testing the Plugin

The plugin is tested against isolated database +class_table_inheritance_plugin_test+ which is created with <tt>rake class_table_inheritance:test:prepare_db</tt>. If you wish to use the standard Rails <tt>test:plugins</tt> task, first create the database:
  rake class_table_inheritance:test:rebuild_database 
  rake test:plugins PLUGIN=class_table_inheritance
or:
  cd vendor/plugins/class_table_inheritance && rake test

Test log is available in <tt>test/debug.log</tt> in the directory of this plugin. Tests can be run outside of Rails app as well as inside.
